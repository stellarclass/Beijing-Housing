xlab('Year') +
ylab('Trading Volume') +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))
year_data <- subset(dataVisualize,!(dataVisualize$tradeYear < 2011))
all_group <- group_by(year_data, district, tradeYear)
beijing_by_value <- dplyr::summarise(all_group, value=sum(totalPrice)/1000)
ggplot(aes(x = tradeYear , y = value, fill = district), data = beijing_by_value) +
geom_bar(stat = 'identity', position = 'stack', width = 0.5) +
coord_flip() +
xlab('Year') +
ylab('Trading Value (1000 Yuan)') +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))
all_group <- group_by(dataVisualize, tradeYear)
beijing_by_average_price <- dplyr::summarise(all_group, average=mean(totalPrice))
ggplot(aes(x=tradeYear, y=average), data =beijing_by_average_price) +
geom_line(size=1.5) +
ylab('Year') +
xlab('Average Total Price (10k Yuan)') +
theme_grey() +
theme(plot.title = element_text(size = 16),
axis.title = element_text(size = 12, face = "bold"))
compareData <- subset(dataVisualize, dataVisualize$tradeYear == 2016)
all_group <- group_by(compareData, district, tradeYear)
beijing_by_volume <- dplyr::summarise(all_group, n=n())
ggplot(aes(x = district , y = n, fill = n), data = beijing_by_volume) +
geom_bar(stat = 'identity', width = 0.5) +
xlab('District') +
ylab('Trading Volume') +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))
all_group <- group_by(compareData, district)
beijing_by_value <- dplyr::summarise(all_group, value=sum(totalPrice)/1000)
ggplot(aes(x = district , y = value, fill = value), data = beijing_by_value) +
geom_bar(stat = 'identity', width = 0.5) +
xlab('District') +
ylab('Trading Value (1000 Yuan)') +
theme_minimal() +
theme(plot.title = element_text(size = 16),
axis.title = element_text(size = 12, face = "bold"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .4))
mypalette <- colorRampPalette(brewer.pal(12,'Paired'))(13)
mycols <- 3
mybox <- compareData %>% ggplot(aes_string('district','price')) + geom_boxplot(aes_string(color='district')) +
scale_color_manual(name='',values=mypalette) + theme_minimal(12) +
theme(axis.title =element_blank(), legend.position='None') +
coord_flip()
grid.arrange(mybox, ncol=1)
makeFeatureCatEDA <- function(x){
mypalette <-'Paired'
mycols <- 2
mybox <- df3 %>% ggplot(aes_string(x,'price')) + geom_boxplot(aes_string(color=x)) +
scale_color_brewer(name='', palette=mypalette) + theme_minimal(12) +
theme(axis.title =element_blank(), legend.position='None') +
labs(title='Average Price Per Square') #+ coord_flip()
grid.arrange(mybox, ncol=1)
}
makeFeatureCatEDA('buildingStructure')
makeFeatureCatEDA('buildingType')
makeFeatureCatEDA('renovationCondition')
makeFeatureCatEDA('elevator')
makeFeatureCatEDA('subway')
makeFeatureCatEDA('fiveYearsProperty')
corrplot(cor(
data %>% select_if(is.numeric) %>% select(-Lng, -Lat) ,use = "pairwise.complete.obs",
method='pearson')
,method='ellipse',
tl.cex = 1,
col = viridis::viridis(50),
tl.col='black')
data=read.csv(paste(data_dir,"imputed_data.csv",sep="/"), header = TRUE, sep = ",")
# Convert to useful type
data$tradeTime = ymd(data$tradeTime)
data$year = year(data$tradeTime)
data = data[, !colnames(data) %in% c("tradeTime")]
data$drawingRoom = as.integer(data$drawingRoom)
data$bathRoom = as.integer(data$bathRoom)
data$buildingType = as.factor(data$buildingType)
data$constructionTime = as.integer(data$constructionTime)
data$renovationCondition = as.factor(data$renovationCondition)
data$buildingStructure = as.factor(data$buildingStructure)
data$elevator = as.factor(data$elevator)
data$fiveYearsProperty = as.factor(data$fiveYearsProperty)
data$subway = as.factor(data$subway)
data$district=as.factor(data$district)
# non informative columns; or factors that have too many levels like Cid
data = data[,!colnames(data) %in% c("url","id","Cid", "totalPrice", "X")]
data_clust <- data[, !colnames(data) %in% c("Lng", "Lat", "Cid", "district")]
set.seed(1234)
kproto_clusters = list()
for (i in seq(2,8,1)) {
kproto_clusters = list.append(kproto_clusters,kproto(data_clust,i,lambda = 1))
}
DO_CLUSTER = F
if(DO_CLUSTER) {
data_clust <- data[, !colnames(data) %in% c("Lng", "Lat", "Cid", "district")]
set.seed(1234)
kproto_clusters = list()
for (i in seq(2,8,1)) {
kproto_clusters = list.append(kproto_clusters,kproto(data_clust,i,lambda = 1))
}
}
DO_CLUSTER = F
if(DO_CLUSTER) {
data_clust <- data[, !colnames(data) %in% c("Lng", "Lat", "Cid", "district")]
set.seed(1234)
kproto_clusters = list()
for (i in seq(2,8,1)) {
kproto_clusters = list.append(kproto_clusters,kproto(data_clust,i,lambda = 1))
}
}
DO_CLUSTER = F
if(DO_CLUSTER) {
data_clust <- data[, !colnames(data) %in% c("Lng", "Lat", "Cid", "district")]
set.seed(1234)
kproto_clusters = list()
for (i in seq(2,8,1)) {
kproto_clusters = list.append(kproto_clusters,kproto(data_clust,i,lambda = 1))
}
wss = c()
for(kc in kproto_clusters) {
wss = c(wss,kc$tot.withinss)
}
}
wss <- readRDS(paste(data_dir,"wss.RDS",sep="/"))
plot(seq(2,8,1), wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
kproto_selection = kproto_clusters[[3]]
kproto_selection = kproto_clusters[[3]]
kproto_selection = kproto_clusters[[3]]
kproto_selection = kproto_clusters[[3]]
kproto_selection = kproto_clusters[[3]]
kproto_selection <- readRDS(paste(data_dir,"kproto_sel.RDS",sep="/"))
data3 <- data
data3$cluster_id = as.factor(kproto_selection$cluster)
bj_map <- data.frame(data3$price, data3$Lat, data3$Lng, data3$cluster_id)
colnames(bj_map) <- c('price', 'lat', 'lon', 'cluster_id')
sbbox <- make_bbox(lon = data3$Lng, lat = data3$Lat, f = 0.05)
my_map <- get_map(location = sbbox, maptype = "roadmap", scale = 2, color="color", zoom = 10)
# Since we have not run the model online, don't run this line!
if(F) kproto_selection = kproto_clusters[[3]]
register_google(key = "AIzaSyA58Q72lPu5mGHwGWSKdZU8EURqH2QzcU8")
kproto_selection <- readRDS(paste(data_dir,"kproto_sel.RDS",sep="/"))
data3 <- data
data3$cluster_id = as.factor(kproto_selection$cluster)
bj_map <- data.frame(data3$price, data3$Lat, data3$Lng, data3$cluster_id)
colnames(bj_map) <- c('price', 'lat', 'lon', 'cluster_id')
sbbox <- make_bbox(lon = data3$Lng, lat = data3$Lat, f = 0.05)
my_map <- get_map(location = sbbox, maptype = "roadmap", scale = 2, color="color", zoom = 10)
ggmap(my_map) +
geom_point(data=bj_map, aes(x = lon, y = lat, color = cluster_id),
size = 0.5, alpha = 1) +
xlab('Longitude') +
ylab('Latitude') +
ggtitle('Clusters on Map')
kproto_results <- data3 %>%
dplyr::select(-price,-Lng,-Lat,-district) %>%
group_by(cluster_id) %>%
do(the_summary = summary(.))
print(kproto_results$the_summary)
data_train_nodummy <- data.frame(data %>% filter(year<2017))
data_test_nodummy <- data.frame(data %>% filter(year>=2017))
data_train_nodummy <- data.frame(data %>% filter(year<2017))
data_test_nodummy <- data.frame(data %>% filter(year>=2017))
for(col in names(data)) {
if(!is.factor(data[,col])) {
data[,col] = as.numeric(data[,col])
next
}
if(col=="price") next
f = as.formula(paste("price~",col,"-1",sep=""))
m = model.matrix(f,data)
data = data[,!colnames(data) %in% c(col)]
data = cbind(data,m)
}
data_train <- data.frame(data %>% filter(year<2017))
data_test <- data.frame(data %>% filter(year>=2017))
train_x = as.matrix(data_train[,!colnames(data_train) %in% c("price")])
train_y = data_train[,colnames(data_train) %in% c("price")]
test_x = as.matrix(data_test[,!colnames(data_test) %in% c("price")])
test_y = data_test[,colnames(data_test) %in% c("price")]
folds <- createFolds(train_y, k = 5)
train_control <- trainControl(
method = "cv",
index = folds,
verboseIter = F,
allowParallel = TRUE # FALSE for reproducible results
)
model_glm <- caret::train(
price ~.-livingRoom-elevator, data_train_nodummy,
metric = "Rsquared",
trControl = train_control,
method = "glm",
preProcess = c("zv", "nzv","center","scale")
)
model_glm$results
model_glm_highorder <- caret::train(
price ~renovationCondition*elevator*communityAverage*subway*floorType,
data_train_nodummy,
metric = "Rsquared",
trControl = train_control,
method = "glm",
preProcess = c("zv", "nzv","center","scale")
)
model_glm_highorder$results
model_rpart <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
tuneGrid = expand.grid(
cp = c(0:5/50)
),
trControl = train_control,
method = "rpart",
preProcess = c("zv", "nzv","center","scale")
)
plot(model_rpart)
model_glm_highorder
model_glm_highorder$finalModel
TUNE_XGB = F
if(TUNE_XGB) {
grid_default <- expand.grid(
nrounds = 100,
max_depth = 6,
eta = 0.3,
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
xgb_base <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = grid_default,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
nrounds <- 500
# note to start nrounds from 200, as smaller learning rates result in errors so
# big with lower starting points that they'll mess the scales
tune_grid1 <- expand.grid(
nrounds = seq(from = 100, to = nrounds, by = 100),
eta = c(0.05, 0.1, 0.3),
max_depth = c(2, 4, 6, 8),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
xgb_tune1 <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = tune_grid1,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
tune_grid2 <- expand.grid(
nrounds = seq(from = 100, to = nrounds, by = 100),
eta = xgb_tune1$bestTune$eta,
max_depth = xgb_tune1$bestTune$max_depth,
gamma = 0,
colsample_bytree = 1,
min_child_weight = c(1, 2, 3),
subsample = 1
)
xgb_tune2 <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = tune_grid2,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
tune_grid3 <- expand.grid(
nrounds = seq(from = 100, to = nrounds, by = 100),
eta = xgb_tune1$bestTune$eta,
max_depth = xgb_tune1$bestTune$max_depth,
gamma = 0,
colsample_bytree = c(0.33, 0.66, 1.0),
min_child_weight = xgb_tune2$bestTune$min_child_weight,
subsample = c(0.5, 0.75, 1.0)
)
xgb_tune3 <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = tune_grid3,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
tune_grid4 <- expand.grid(
nrounds = seq(from = 100, to = nrounds, by = 100),
eta = xgb_tune1$bestTune$eta,
max_depth = xgb_tune1$bestTune$max_depth,
gamma = c(0, 0.1, 0.5, 0.8, 1.0),
colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
min_child_weight = xgb_tune2$bestTune$min_child_weight,
subsample = xgb_tune3$bestTune$subsample
)
xgb_tune4 <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = tune_grid4,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
tune_grid5 <- expand.grid(
nrounds = seq(from = 100, to = nrounds, by = 100),
eta = seq(xgb_tune1$bestTune$eta,xgb_tune1$bestTune$eta/20,length.out = 5),
max_depth = xgb_tune1$bestTune$max_depth,
gamma = xgb_tune4$bestTune$gamma,
colsample_bytree = xgb_tune3$bestTune$colsample_bytree,
min_child_weight = xgb_tune2$bestTune$min_child_weight,
subsample = xgb_tune3$bestTune$subsample
)
xgb_tune5 <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = tune_grid5,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
write.csv(bestTune,paste(model_dir,"bestXGB.csv",sep = "/"),row.names = F)
# Retrain the best models
grid_best <- expand.grid(
nrounds = bestTune$nrounds,
max_depth = bestTune$max_depth,
eta = bestTune$eta,
gamma = bestTune$gamma,
colsample_bytree = bestTune$colsample_bytree,
min_child_weight = bestTune$min_child_weight,
subsample = bestTune$subsample
)
xgb_best <- caret::train(
x = train_x,
y = train_y,
metric = "Rsquared",
trControl = train_control,
tuneGrid = grid_best,
method = "xgbTree",
verbose = TRUE,
preProcess = c("zv", "nzv","center","scale")
)
saveRDS(xgb_best, paste(model_dir,"xgb.model",sep="/"))
saveRDS(xgb_base, paste(model_dir,"xgb_base.model",sep="/"))
saveRDS(xgb_tune1, paste(model_dir,"xgb_tune1.model",sep="/"))
saveRDS(xgb_tune2, paste(model_dir,"xgb_tune2.model",sep="/"))
saveRDS(xgb_tune3, paste(model_dir,"xgb_tune3.model",sep="/"))
saveRDS(xgb_tune4, paste(model_dir,"xgb_tune4.model",sep="/"))
saveRDS(xgb_tune5, paste(model_dir,"xgb_tune5.model",sep="/"))
}
xgb_best = readRDS(paste(model_dir,"xgb.model",sep="/"))
xgb_base = readRDS(paste(model_dir,"xgb_base.model",sep="/"))
xgb_tune1 = readRDS(paste(model_dir,"xgb_tune1.model",sep="/"))
xgb_tune2 = readRDS(paste(model_dir,"xgb_tune2.model",sep="/"))
xgb_tune3 = readRDS(paste(model_dir,"xgb_tune3.model",sep="/"))
xgb_tune4 = readRDS(paste(model_dir,"xgb_tune4.model",sep="/"))
xgb_tune5 = readRDS(paste(model_dir,"xgb_tune5.model",sep="/"))
model_list = list(v1=xgb_tune1,
v2=xgb_tune2,
v3=xgb_tune3,
v4=xgb_tune4,
v5=xgb_tune5,
xgboost_base=xgb_base
)
resamps <- resamples(model_list)
summary(resamps, metric = "Rsquared")
dotplot(resamps, metric = "Rsquared")
print(xgb_tune5$bestTune)
bestTune = xgb_tune5$bestTune
model_list = list(glm=model_glm,
rpart=model_rpart,
xgboost_base=xgb_base,
xgboost_best=xgb_best
)
resamps <- resamples(model_list)
summary(resamps, metric = "Rsquared")
dotplot(resamps, metric = "Rsquared")
model = xgb_best
pred = data.frame('Prediction'= predict(model,test_x),'True' = test_y)
ggplot(data=pred,aes(x=True,y=Prediction)) + geom_jitter() + geom_smooth(method='lm',size=.5) +
theme_minimal(12) + labs(title=paste0('Prediction vs. Ground truth for ',model$method))
xgb_best_test_results = postResample(pred = pred$Prediction, obs = pred$True)
model = model_rpart
pred = data.frame('Prediction'= predict(model,test_x),'True' = test_y)
ggplot(data=pred,aes(x=True,y=Prediction)) + geom_jitter() + geom_smooth(method='lm',size=.5) +
theme_minimal(12) + labs(title=paste0('Prediction vs. Ground truth for ',model$method))
rpart_test_results = postResample(pred = pred$Prediction, obs = pred$True)
model = model_glm
pred = data.frame('Prediction'= predict(model_glm,data_test_nodummy),'True' = data_test_nodummy$price)
ggplot(data=pred,aes(x=True,y=Prediction)) + geom_jitter() + geom_smooth(method='lm',size=.5) +
theme_minimal(12) + labs(title=paste0('Prediction vs. Ground truth for ',model_glm$method))
glm_test_results = postResample(pred = pred$Prediction, obs = pred$True)
df_test_results = data.frame(xgb_best_test_results,rpart_test_results,glm_test_results)
df_test_results
mat = xgb.importance (feature_names = colnames(train_x),model = xgb_best$finalModel)
xgb.plot.importance (importance_matrix = mat[1:10])
?make_bbox
kproto_selection <- readRDS(paste(data_dir,"kproto_sel.RDS",sep="/"))
data3 <- data
data3$cluster_id = as.factor(kproto_selection$cluster)
bj_map <- data.frame(data3$price, data3$Lat, data3$Lng, data3$cluster_id)
colnames(bj_map) <- c('price', 'lat', 'lon', 'cluster_id')
sbbox <- make_bbox(lon = data3$Lng, lat = data3$Lat, f = 0.05)
my_map <- get_map(location = sbbox, maptype = "roadmap", scale = 2, color="color", zoom = 10)
ggmap(my_map) +
geom_point(data=bj_map, aes(x = lon, y = lat, color = cluster_id),
size = 0.5, alpha = 1) +
xlab('Longitude') +
ylab('Latitude') +
ggtitle('Clusters on Map')
library(plyr)
library(dplyr)
library(Hmisc)
library(ggpubr)
library(DMwR)
library(caret)
library(pROC)
library(ggplot2)
library(ggpubr)
library(stringr)
library(lubridate)
library(fastDummies)
library(Matrix)
library(onehot)
library(vtreat)
library(statsr)
library(knitr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(rworldmap)
library(ggthemes)
library(rgdal)
library(corrplot)
library(reshape2)
library(gridExtra)
library(lubridate)
library(caret)
library(psych)
library(reshape2)
library(doMC)
library(xgboost)
library(ggmap)
registerDoMC(4)
library(mice)
set.seed(42)
model_dir = "models"
data_dir = "data"
register_google(key = "AIzaSyA58Q72lPu5mGHwGWSKdZU8EURqH2QzcU8")
library(plyr)
library(dplyr)
library(Hmisc)
library(ggpubr)
library(DMwR)
library(caret)
library(pROC)
library(ggplot2)
library(ggpubr)
library(stringr)
library(lubridate)
library(fastDummies)
library(Matrix)
library(onehot)
library(vtreat)
library(statsr)
library(knitr)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(rworldmap)
library(ggthemes)
library(rgdal)
library(corrplot)
library(reshape2)
library(gridExtra)
library(lubridate)
library(caret)
library(psych)
library(reshape2)
library(doMC)
library(xgboost)
library(ggmap)
registerDoMC(4)
library(mice)
set.seed(42)
model_dir = "models"
data_dir = "data"
runApp('edu/YorkU_ML/term1/assigment3/Beijing-Housing')
shiny::runApp('edu/YorkU_ML/term1/assigment3/Beijing-Housing')
